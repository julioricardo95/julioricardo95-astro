---
---
<div class="chat-container">
  <emoji-picker class="emoji-picker"></emoji-picker>
  <div class="chat-toggle" id="chat-toggle">ðŸ’¬</div>
  <div class="chat-window" id="chat-window">
    <div class="chat-header">
      <h3 class="chat-title">Chat Room</h3>
      <div class="online-status">
        ðŸ‘¥ <span id="online-count">0</span> online
      </div>
    </div>
    <div class="chat-messages" id="chat-messages"></div>
    <div class="chat-input">
      <input
      type="text"
      class="message-input"
      id="message-input"
      placeholder="Type a message..."
      />
      <button class="emoji-button" id="emoji-button">
        ðŸ˜Š
        <!-- Emoji picker como hijo del botÃ³n -->
      </button>
      <button class="send-button" id="send-button">Send</button>
    </div>
  </div>
</div>
  
  
  <script>
    class ChatSystem {
      username: string;
      toggleButton!: HTMLElement | null;
      sendButton!: HTMLElement | null;
      messages: { id: number; username: string; content: string; timestamp: string }[];
      messageInput!: HTMLInputElement | null;

      constructor() {
        this.messages = JSON.parse(localStorage.getItem('chat-messages') || '[]');
        this.username = localStorage.getItem('username') || `User${Math.floor(Math.random() * 1000)}`;
        this.setupEventListeners();
        this.renderMessages();
        this.setupEmojiPicker();
      }
  
      setupEventListeners() {
        this.toggleButton = document.getElementById('chat-toggle');
        this.sendButton = document.getElementById('send-button');
        this.messageInput = document.getElementById('message-input') as HTMLInputElement;
        this.toggleButton?.addEventListener('click', this.toggleChatWindow.bind(this));
        this.sendButton?.addEventListener('click', this.sendMessage.bind(this));
        this.messageInput?.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') this.sendMessage();
        });
      }
  
      toggleChatWindow() {
        document.getElementById('chat-window')?.classList.toggle('active');
      }
  
      sendMessage() {
        const message = this.messageInput?.value.trim() || '';
  
        if (message) {
          const newMessage = {
            id: Date.now(),
            username: this.username,
            content: this.sanitizeInput(message),
            timestamp: new Date().toISOString()
          };
  
          this.messages.push(newMessage);
          localStorage.setItem('chat-messages', JSON.stringify(this.messages));
          this.renderMessages();
          if (this.messageInput) {
            this.messageInput.value = '';
          }
        }
      }
  
      renderMessages() {
        const messagesContainer = document.getElementById('chat-messages');
        if (!messagesContainer) return;
  
        messagesContainer.innerHTML = this.messages
          .map(msg => `
            <div class="message">
              <strong>${msg.username}</strong>
              <p>${msg.content}</p>
              <small>${new Date(msg.timestamp).toLocaleTimeString()}</small>
            </div>
          `)
          .join('');
  
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
  
      async setupEmojiPicker() {
  const emojiButton = document.getElementById('emoji-button');

  if (!emojiButton || !this.messageInput) return;

  // Importar el emoji-picker dinÃ¡micamente
  const { Picker } = await import('emoji-picker-element');

  // Crear el picker
  const picker = new Picker();
  picker.classList.add('emoji-picker');
  emojiButton.appendChild(picker); // AÃ±adir el picker como hijo del botÃ³n

  // Mostrar/ocultar el picker al hacer clic en el botÃ³n de emoji
  emojiButton.addEventListener('click', (e) => {
    e.stopPropagation(); // Evitar que el clic se propague
    emojiButton.classList.toggle('active'); // Alternar la clase active
  });

  // Ocultar el picker al hacer clic fuera de Ã©l
  document.addEventListener('click', (e) => {
    if (!emojiButton.contains(e.target as Node)) {
      emojiButton.classList.remove('active');
    }
  });

  // Insertar el emoji seleccionado en el input
  picker.addEventListener('emoji-click', (event) => {
    if (this.messageInput) {
      this.messageInput.value += event.detail.unicode;
    }
    emojiButton.classList.remove('active'); // Ocultar el picker despuÃ©s de seleccionar un emoji
  });
}
  
      sanitizeInput(input: string) {
        const div = document.createElement('div');
        div.textContent = input;
        return div.innerHTML;
      }
    }
  
    // Initialize chat when the DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new ChatSystem();
    });
  </script>
  
  <style>
    :root {
  --accent-color: #007bff;
  --bg-color: #f8f9fa;
  --white-color: white;
  --text-color: #000;
  --input-border-color: #ddd;
  --input-focus-color: rgba(0, 123, 255, 0.5);
  --box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  --box-shadow-hover: 0 4px 15px rgba(0, 0, 0, 0.2);
  --input-padding: 0.5rem;
  --button-hover-bg: #0056b3;
}

.chat-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  z-index: 1000;
}

.chat-toggle {
  background: var(--accent-color);
  color: var(--white-color);
  width: 50px;
  height: 50px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  font-size: 1.5rem;
  box-shadow: var(--box-shadow);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.chat-toggle:hover {
  transform: scale(1.1);
  box-shadow: var(--box-shadow-hover);
}

.chat-window {
  display: none;
  position: absolute;
  bottom: 70px;
  right: 0;
  width: 300px;
  height: 400px;
  background: var(--white-color);
  border-radius: 10px;
  box-shadow: var(--box-shadow-hover);
  overflow: hidden;
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.chat-window.active {
  display: flex;
  flex-direction: column;
  opacity: 1;
  transform: translateY(0);
}

.chat-header {
  padding: 1rem;
  background: var(--accent-color);
  color: var(--white-color);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-messages {
  flex-grow: 1;
  padding: 1rem;
  overflow-y: auto;
  animation: fadeIn 0.5s ease;
}

.message {
  margin-bottom: 1rem;
  padding: var(--input-padding);
  background: var(--bg-color);
  border-radius: 5px;
  opacity: 0;
  animation: slideIn 0.3s ease forwards;
}

.chat-input {
  padding: 1rem;
  display: flex;
  gap: 0.5rem;
  border-top: 1px solid #eee;
}

.message-input {
  flex-grow: 1;
  padding: var(--input-padding);
  border: 1px solid var(--input-border-color);
  border-radius: 4px;
  transition: box-shadow 0.3s ease;
}

.message-input:focus {
  box-shadow: 0 0 5px var(--input-focus-color);
}

.send-button {
  padding: var(--input-padding) 1rem;
  background: var(--accent-color);
  color: var(--white-color);
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;
}

.send-button:hover {
  background: var(--button-hover-bg);
}

.emoji-button {
  position: absolute;
  left: -1000px;
  padding: var(--input-padding) 1rem;
  background: var(--accent-color);
  color: var(--white-color);
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s ease;

}

.emoji-button:hover {
  background: var(--button-hover-bg);
}

.emoji-picker {
  display: none;
  position: relative;
  bottom: 40px;
  right: 0;
  z-index: 1001;
  background: var(--white-color);
  border: 1px solid var(--input-border-color);
  border-radius: 8px;
  box-shadow: var(--box-shadow-hover);
  max-width: 300px;
  max-height: 300px;
  overflow-y: auto;
}

.emoji-button.active .emoji-picker {
  display: block;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideIn {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@media (max-width: 768px) {
  .chat-window {
    bottom: 0;
    right: 0;
    border-radius: 0;
    bottom: 70px;
  }
}
  </style>