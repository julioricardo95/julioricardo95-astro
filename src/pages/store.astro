---
import Layout from '../layouts/Layoutt.astro';
import ProductCard from '../component/ProductCard.astro';
import ProductFilters from '../component/ProductFilters.astro';
import productsData from '../data/products.json';
import Chat from '../component/chat.astro';
import WhasappBottom from '../component/whasapp_bottom.astro';
---

<Layout title="Fanaticos a la tecnologia">
  <main>
    <h1>Fanaticos a la tecnologia ðŸŽ®ðŸ’»ðŸ“±</h1>
    <ProductFilters />
    <div id="productsGrid" class="products-grid">
      {productsData.products.map((product) => (
        <ProductCard product={product} />
      ))}
    </div>
    <p id="noResults" class="no-results" style="display: none;">
      No se encontraron productos que coincidan con los filtros seleccionados.
    </p>
  </main>
  <WhasappBottom></WhasappBottom>
  <Chat></Chat>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    max-width: 1200px;
  }

  h1 {
    text-align: center;
    color: white;
    margin-bottom: 2rem;
  }

  .products-grid {
    display: grid;
    place-items: center;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1rem;
    padding: 0.5rem 0;
  }

  .no-results {
    text-align: center;
    color: white;
    font-size: 1.2rem;
    padding: 2rem;
  }

  .product-card {
    background: #fff;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
  }

  .product-card:hover {
    transform: translateY(-5px);
  }

  .product-image {
    width: 100%;
    height: auto;
  }

  .product-info {
    padding: 1rem;
  }

  .product-title {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
  }

  .specs {
    margin-bottom: 1rem;
  }

  .spec-item {
    margin: 0.25rem 0;
  }

  .price-link-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1rem;
  }

  .product-price {
    font-size: 1.5rem;
    color: #333;
  }

  .product-link img {
    width: 40px;
    height: 40px;
    border-radius: 50%;
  }

  @media (max-width: 768px) {
    .products-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }
</style>

<script>
  interface Product {
    MARCA: string;
    MODELO: string;
    PROCESADOR: string;
    PANTALLA: number;
    PRECIO: number;
    IMG: string;
    DESCRIPCION: string;
  }

  let products: Product[] = [];

  async function loadProducts(): Promise<Product[]> {
    const response = await fetch('/src/data/products.json');
    const data = await response.json();
    products = data.products;
    return products;
  }

  function getFilterValues(): {
    searchText: string;
    minPrice: number;
    maxPrice: number;
    screenSize: string;
    sortPrice: string;
  } {
    return {
      searchText: (document.getElementById('searchInput') as HTMLInputElement).value.toLowerCase(),
      minPrice: parseFloat((document.getElementById('minPrice') as HTMLInputElement).value),
      maxPrice: parseFloat((document.getElementById('maxPrice') as HTMLInputElement).value),
      screenSize: (document.getElementById('screenSize') as HTMLSelectElement).value,
      sortPrice: (document.getElementById('sortPrice') as HTMLSelectElement).value,
    };
  }

  function filterProducts(): Product[] {
    const { searchText, minPrice, maxPrice, screenSize, sortPrice } = getFilterValues();

    let filtered = products.filter(product => {
      const matchesSearch = !searchText || 
        product.MARCA.toLowerCase().includes(searchText) ||
        product.MODELO.toLowerCase().includes(searchText) ||
        product.PROCESADOR.toLowerCase().includes(searchText);

      const matchesPrice = (!minPrice || product.PRECIO >= minPrice) &&
        (!maxPrice || product.PRECIO <= maxPrice);

      const matchesScreen = !screenSize || 
        (screenSize === '13' && product.PANTALLA <= 13) ||
        (screenSize === '14' && product.PANTALLA === 14) ||
        (screenSize === '15' && product.PANTALLA >= 15);

      return matchesSearch && matchesPrice && matchesScreen;
    });

    if (sortPrice) {
      filtered.sort((a, b) => {
        return sortPrice === 'asc' ? a.PRECIO - b.PRECIO : b.PRECIO - a.PRECIO;
      });
    }

    return filtered;
  }

  function renderProducts(filteredProducts: Product[]): void {
    const grid = document.getElementById('productsGrid');
    const noResults = document.getElementById('noResults');

    if (filteredProducts.length === 0) {
      grid.style.display = 'none';
      noResults.style.display = 'block';
    } else {
      grid.style.display = 'grid';
      noResults.style.display = 'none';
      
grid.innerHTML = filteredProducts.map(product => `
  <article class="product-card">
    <div class="card-inner">
      <div class="card-front">
        <img class="product-image" src="/img/catalogo/${product.IMG}" alt="${product.MARCA} ${product.MODELO}" />
        <div class="product-info">
          <h2 class="product-title">${product.MARCA} ${product.MODELO}</h2>
          <div class="specs">
            <p class="spec-item"><strong>Procesador:</strong> ${product.PROCESADOR}</p>
            <p class="spec-item"><strong>Pantalla:</strong> ${product.PANTALLA}"</p>
          </div>
        </div>
      </div>
      <div class="card-back">
        <div class="product-info">
          <h2 class="product-title">${product.MARCA} ${product.MODELO}</h2>
          <p class="product-description">${product.DESCRIPCION}</p>
          <div class="price-link-container">
            <p class="product-price">${product.PRECIO.toLocaleString('es-ES', { minimumFractionDigits: 2 })}</p>
            <a class="product-link" href="https://wa.me/message/H4MRQFKG6WBLG1">
              <img class="link-img" src="/img/compuparts_sa.jpg" alt="compuparts_sa">
            </a>
          </div>
        </div>
      </div>
    </div>
  </article>
`).join('');
    }
  }

  function handleFilterChange(): void {
    const filteredProducts = filterProducts();
    renderProducts(filteredProducts);
  }

  // Initialize
  document.addEventListener('DOMContentLoaded', async () => {
    await loadProducts();
    
    // Add event listeners
    const inputs = ['searchInput', 'minPrice', 'maxPrice', 'screenSize', 'sortPrice'];
    inputs.forEach(id => {
      const element = document.getElementById(id);
      if (element) {
        element.addEventListener('input', handleFilterChange);
        element.addEventListener('change', handleFilterChange);
      }
    });

    // Initial render
    handleFilterChange();
  });
</script>